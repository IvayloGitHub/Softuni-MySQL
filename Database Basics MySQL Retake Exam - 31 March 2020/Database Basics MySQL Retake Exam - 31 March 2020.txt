CREATE TABLE users (
id INT AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(30) NOT NULL UNIQUE,
`password` VARCHAR(30) NOT NULL,
email VARCHAR(50) NOT NULL,
gender CHAR(1) NOT NULL,
age INT NOT NULL,
job_title VARCHAR(40) NOT NULL,
ip VARCHAR(30) NOT NULL
);

CREATE TABLE addresses (
id INT AUTO_INCREMENT PRIMARY KEY,
address VARCHAR(30) NOT NULL,
town VARCHAR(30) NOT NULL,
country VARCHAR(30) NOT NULL,
user_id INT NOT NULL,
CONSTRAINT `fk_addresses_users`
FOREIGN KEY (user_id)
REFERENCES users(id)
);

CREATE TABLE photos (
id INT AUTO_INCREMENT PRIMARY KEY,
`description` TEXT NOT NULL,
`date` DATETIME NOT NULL,
views INT NOT NULL DEFAULT 0
);

CREATE TABLE comments (
id INT AUTO_INCREMENT PRIMARY KEY,
`comment` VARCHAR(255) NOT NULL,
`date` DATETIME NOT NULL,
photo_id INT NOT NULL,
CONSTRAINT `fk_comments_photos`
FOREIGN KEY (photo_id)
REFERENCES photos(id)
);

CREATE TABLE likes (
id INT AUTO_INCREMENT PRIMARY KEY,
photo_id INT,
user_id INT,
CONSTRAINT `fk_likes_photos`
FOREIGN KEY (photo_id)
REFERENCES photos(id),
CONSTRAINT `fk_likes_users`
FOREIGN KEY (user_id)
REFERENCES users(id)
);

CREATE TABLE users_photos(
user_id INT NOT NULL,
photo_id INT NOT NULL,
CONSTRAINT `pk_users_photos`
PRIMARY KEY (user_id, photo_id),
CONSTRAINT `fk_users_photos_users`
FOREIGN KEY (user_id)
REFERENCES users(id),
CONSTRAINT `fk_users_photos_photos`
FOREIGN KEY (photo_id)
REFERENCES photos(id)
);

---------------------------------------------------------

2.

INSERT INTO addresses(address, town, country, user_id)
SELECT username, `password`, ip, age
FROM users
WHERE  gender = 'M';

---------------------------------------------------------

3.

UPDATE addresses AS a
SET a.country = 
(CASE 
   WHEN a.country LIKE 'B%' THEN 'Blocked'
   WHEN a.country LIKE 'T%' THEN 'Test'
   WHEN a.country LIKE 'P%' THEN 'In Progress'
   ELSE a.country
END); 

---------------------------------------------------------

4.

DELETE FROM addresses
WHERE id % 3 = 0;

--------------------------------------------------------

5.

SELECT username, gender, age
FROM users
ORDER BY age DESC, username;


--------------------------------------------------------

6.

SELECT p.id, p.`date` AS date_and_time, p.`description`, COUNT(c.id) AS commentsCount
FROM photos AS p
JOIN comments AS c
ON p.id = c.photo_id
GROUP BY p.id
ORDER BY commentsCount DESC, id
LIMIT 5;

---------------------------------------------------------

7.

SELECT CONCAT(u.id, ' ', u.username) AS id_username, u.email 
FROM users AS u
JOIN users_photos AS up
ON u.id = up.user_id
WHERE u.id = up.photo_id
ORDER BY u.id;

---------------------------------------------------------

8.

SELECT p.id, 
(SELECT COUNT(*) FROM likes AS l WHERE p.id = l.photo_id) AS likes_count,
(SELECT COUNT(*) FROM comments AS c WHERE p.id = c.photo_id) AS comments_count
FROM photos AS p
ORDER BY likes_count DESC, comments_count DESC, p.id;

--------------

SELECT p.id, COUNT(DISTINCT l.id) AS likes_count, COUNT(DISTINCT c.id) AS comments_count
FROM photos AS p
LEFT JOIN likes AS l
ON p.id = l.photo_id
LEFT JOIN comments AS c
ON c.photo_id = p.id
GROUP BY p.id
ORDER BY likes_count DESC, comments_count DESC, p.id;

---------------------------------------------------------

9.

SELECT CONCAT(SUBSTRING(`description`, 1, 30) , '...') AS summery, `date` 
FROM photos AS p
WHERE DAY(`date`) = 10
ORDER BY p.`date` DESC;

---------------------------------------------------------

10.

DELIMITER $$
CREATE FUNCTION udf_users_photos_count(username VARCHAR(30))
RETURNS INTEGER
DETERMINISTIC
BEGIN
RETURN(
SELECT COUNT(up.photo_id) 
FROM users_photos AS up
JOIN users AS u
ON u.id = up.user_id
WHERE u.username = username
);
END$$

---------------------------------------------------------

11.

CREATE PROCEDURE udp_modify_user (address VARCHAR(30), town VARCHAR(30))
BEGIN
UPDATE users AS u
JOIN addresses AS a
ON u.id = a.user_id
SET u.age = u.age + 10
WHERE a.address = address AND a.town = town;
END







